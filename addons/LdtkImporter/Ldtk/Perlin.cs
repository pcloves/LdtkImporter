using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using Godot;

namespace LdtkImporter;

/// <summary>
/// source from <a href="https://github.com/HeapsIO/heaps/blob/1.10.0/hxd/Perlin.hx">heaps</a>
/// </summary>
[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "UnusedMember.Local")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
public class Perlin
{
    private int repeat;
    public bool Normalize = false;
    private readonly List<float> gradients = new();

    public Perlin()
    {
        repeat = 0x7FFFFFFF;
        for (int i = 0; i < NGRADS; i++)
        {
            gradients.Add(GRADIENTS[i * 3] * 2.12f);
            gradients.Add(GRADIENTS[i * 3 + 1] * 2.12f);
            gradients.Add(GRADIENTS[i * 3 + 2] * 2.12f);
            gradients.Add(0); // padding
        }
    }

    private float SCurve(float a)
    {
        var a2 = a * a;
        return a2 * a * (6.0f * a2 - 15.0f * a + 10.0f);
    }

    public float Linear(float a, float b, float k)
    {
        return a + k * (b - a);
    }

    public float Gradient3DAt(float x, float y, float z, int ix, int iy, int iz, int seed)
    {
        var index = seed * 1013 + (ix % repeat) * 1619 + (iy % repeat) * 31337 + iz * 6971;
        index = (index ^ (index >> 8)) & 0xFF;
        index <<= 2;

        var gx = gradients[index];
        var gy = gradients[index + 1];
        var gz = gradients[index + 2];

        return gx * (x - ix) + gy * (y - iy) + gz * (z - iz);
    }

    public float Gradient1DAt(float x, int ix, int seed)
    {
        var index = seed * 1013 + (ix % repeat) * 1619;
        index = ((index ^ (index >> 8)) & 0xFF);

        var gx = gradients[index << 2];
        return gx * (x - ix);
    }

    public float GradientAt(float x, float y, int ix, int iy, int seed)
    {
        var index = seed * 1013 + (ix % repeat) * 1619 + (iy % repeat) * 31337;
        index = ((index ^ (index >> 8)) & 0xFF);

        var gx = gradients[index << 2];
        var gy = gradients[(index << 2) + 1];
        return gx * (x - ix) + gy * (y - iy);
    }

    public float AdjustScale(int size, float scale)
    {
        repeat = Convert.ToInt32(size * scale);
        return (float)repeat / size;
    }

    public float Gradient3D(int seed, float x, float y, float z)
    {
        var ix = (int)x;
        var xs = SCurve(x - ix);
        var iy = (int)y;
        var ys = SCurve(y - iy);
        var iz = (int)z;
        var zs = SCurve(z - iz);

        var ga = Gradient3DAt(x, y, z, ix, iy, iz, seed);
        var gb = Gradient3DAt(x, y, z, ix + 1, iy, iz, seed);
        var gc = Gradient3DAt(x, y, z, ix, iy + 1, iz, seed);
        var gd = Gradient3DAt(x, y, z, ix + 1, iy + 1, iz, seed);
        var v1 = Linear(Linear(ga, gb, xs), Linear(gc, gd, xs), ys);

        ga = Gradient3DAt(x, y, z, ix, iy, iz + 1, seed);
        gb = Gradient3DAt(x, y, z, ix + 1, iy, iz + 1, seed);
        gc = Gradient3DAt(x, y, z, ix, iy + 1, iz + 1, seed);
        gd = Gradient3DAt(x, y, z, ix + 1, iy + 1, iz + 1, seed);
        var v2 = Linear(Linear(ga, gb, xs), Linear(gc, gd, xs), ys);

        return Linear(v1, v2, zs);
    }

    public float Gradient1D(int seed, float x)
    {
        var ix = (int)x;
        var xs = SCurve(x - ix);
        var ga = Gradient1DAt(x, ix, seed);
        var gb = Gradient1DAt(x, ix + 1, seed);

        return Linear(ga, gb, xs);
    }

    public float Gradient(int seed, float x, float y)
    {
        return InlineGradient(seed, x, y);
    }

    public float InlineGradient(int seed, float x, float y)
    {
        var ix = (int)x;
        var xs = SCurve(x - ix);
        var iy = (int)y;
        var ys = SCurve(y - iy);
        var ga = GradientAt(x, y, ix, iy, seed);
        var gb = GradientAt(x, y, ix + 1, iy, seed);
        var gc = GradientAt(x, y, ix, iy + 1, seed);
        var gd = GradientAt(x, y, ix + 1, iy + 1, seed);

        return Linear(Linear(ga, gb, xs), Linear(gc, gd, xs), ys);
    }

    public float PerlinNoise(int seed, float x, float y, int octaves, float persist = 0.5f, float lacunarity = 2.0f)
    {
        var v = 0f;
        var k = 1f;
        var sum = 0f;
        for (var i = 0; i < octaves; i++)
        {
            v += InlineGradient(seed + i, x, y) * k;
            sum += k;
            k *= persist;
            x *= lacunarity;
            y *= lacunarity;
        }

        if (Normalize)
            v /= sum;

        return v;
    }

    public float Perlin1D(int seed, float x, int octaves, float persist = 0.5f, float lacunarity = 2.0f)
    {
        var v = 0f;
        var k = 1f;
        var sum = 0f;
        for (var i = 0; i < octaves; i++)
        {
            v += Gradient1D(seed + i, x) * k;
            sum += k;
            k *= persist;
            x *= lacunarity;
        }

        if (Normalize)
            v /= sum;

        return v;
    }

    public float Ridged(int seed, float x, float y, int octaves, float offset = 0.5f, float gain = 2.0f,
        float persist = 0.5f, float lacunarity = 2.0f)
    {
        var v = 0f;
        var p = 1f;
        var s = lacunarity;
        var weight = 1f;
        var tot = 0f;
        for (var i = 0; i < octaves; i++)
        {
            var g = InlineGradient(seed + i, x * s, y * s) * p;
            g = offset - Mathf.Abs(g);
            g *= g;
            g *= weight;
            v += g * s;
            tot += p;
            weight = g * gain;
            if (weight < 0)
                weight = 0;
            else if (weight > 1)
                weight = 1;
            p *= persist;
            s *= lacunarity;
        }

        return v / tot;
    }

    public double ThresholdValue(float p)
    {
        if (p < 0f)
            p = 0f;
        else if (p > 1f)
            p = 1f;

        p *= 100f;

        var ip = Mathf.FloorToInt(p);
        var rp = p - ip;

        return THRESHOLD[ip] * (1 - rp) + THRESHOLD[ip + 1] * rp;
    }

    public float MaxValue(int octaves, float persist)
    {
        var tot = 0f;
        var n = 1f;
        for (var i = 0; i < octaves; i++)
        {
            tot += n;
            n *= persist;
        }

        return tot;
    }

    static double[] THRESHOLD =
    {
        1, 0.8592513390087628, 0.7688052643570193, 0.7087726039952893, 0.6647113603276184, 0.6259580701471196,
        0.5920876252486609, 0.5638284687296424, 0.5369372345528312, 0.511056830054494, 0.4891529471303026,
        0.4686450546837182, 0.4469326426188986, 0.42882977072465217, 0.4115690486935469, 0.3952190621773927,
        0.3798495121020824, 0.3643113031451191, 0.35076791715497774, 0.3358660685112593, 0.32201072855694396,
        0.30892806298001424, 0.29560958280721134, 0.2832470678288159, 0.2722624402634705, 0.2600091343032725,
        0.24710140949920625, 0.2349447759632499, 0.22457445993513606, 0.2131403744385778, 0.20134549348263955,
        0.19132099693471735, 0.18016204676639877, 0.16909697184035943, 0.15815708577407128, 0.14775905113977691,
        0.13737312582001757, 0.12679718647885954, 0.11701991502195597, 0.10624599158763885, 0.09609048359894327,
        0.08635324413900251, 0.0762801324162865, 0.06646726089820731, 0.0571162548765321, 0.04732040978140301,
        0.03746852290171843, 0.02760801110707689, 0.01855811300246339, 0.008752118293491621, -0.00026550350742319883,
        -0.009223060038956728, -0.018789261222506563, -0.02813411229450641, -0.037449134344404396,
        -0.047633978239489054, -0.05667766384393364, -0.06659034350322503, -0.07645132312609348, -0.08656692974909674,
        -0.09627118700050882, -0.1064336189892197, -0.11629659915342927, -0.12724141562978428, -0.1365750929947163,
        -0.14749015429008164, -0.15794701447299161, -0.1690704979682489, -0.1797491149113014, -0.19011257230921322,
        -0.20267749998580525, -0.21336778447921598, -0.22415851131081582, -0.23631096442472443, -0.24807216374333516,
        -0.2591033223085105, -0.27269322302966537, -0.28403803141897216, -0.2963974007554812, -0.3083788633812219,
        -0.32389260486288124, -0.33610722830796497, -0.3494739103345917, -0.3645474951406685, -0.3788771169950788,
        -0.3946810512888161, -0.41116590125178826, -0.42801184970580164, -0.44724281354749623, -0.4675222546982302,
        -0.4879511602870796, -0.5116520577174579, -0.5363099352376801, -0.5631265791839567, -0.5916916949583626,
        -0.6247612900993957, -0.6641509690983356, -0.7069660117262387, -0.7690351018175968, -0.8566093984511503, -1, -1
    };

    // 256 randomized 3D gradients
    private static readonly int NGRADS = 256;
    public static int GPREC = 65536;

    private static readonly float[] GRADIENTS =
    {
        -0.763874f, -0.596439f, -0.246489f,
        0.396055f, 0.904518f, -0.158073f,
        -0.499004f, -0.8665f, -0.0131631f,
        0.468724f, -0.824756f, 0.316346f,
        0.829598f, 0.43195f, 0.353816f,
        -0.454473f, 0.629497f, -0.630228f,
        -0.162349f, -0.869962f, -0.465628f,
        0.932805f, 0.253451f, 0.256198f,
        -0.345419f, 0.927299f, -0.144227f,
        -0.715026f, -0.293698f, -0.634413f,
        -0.245997f, 0.717467f, -0.651711f,
        -0.967409f, -0.250435f, -0.037451f,
        0.901729f, 0.397108f, -0.170852f,
        0.892657f, -0.0720622f, -0.444938f,
        0.0260084f, -0.0361701f, 0.999007f,
        0.949107f, -0.19486f, 0.247439f,
        0.471803f, -0.807064f, -0.355036f,
        0.879737f, 0.141845f, 0.453809f,
        0.570747f, 0.696415f, 0.435033f,
        -0.141751f, -0.988233f, -0.0574584f,
        -0.58219f, -0.0303005f, 0.812488f,
        -0.60922f, 0.239482f, -0.755975f,
        0.299394f, -0.197066f, -0.933557f,
        -0.851615f, -0.220702f, -0.47544f,
        0.848886f, 0.341829f, -0.403169f,
        -0.156129f, -0.687241f, 0.709453f,
        -0.665651f, 0.626724f, 0.405124f,
        0.595914f, -0.674582f, 0.43569f,
        0.171025f, -0.509292f, 0.843428f,
        0.78605f, 0.536414f, -0.307222f,
        0.18905f, -0.791613f, 0.581042f,
        -0.294916f, 0.844994f, 0.446105f,
        0.342031f, -0.58736f, -0.7335f,
        0.57155f, 0.7869f, 0.232635f,
        0.885026f, -0.408223f, 0.223791f,
        -0.789518f, 0.571645f, 0.223347f,
        0.774571f, 0.31566f, 0.548087f,
        -0.79695f, -0.0433603f, -0.602487f,
        -0.142425f, -0.473249f, -0.869339f,
        -0.0698838f, 0.170442f, 0.982886f,
        0.687815f, -0.484748f, 0.540306f,
        0.543703f, -0.534446f, -0.647112f,
        0.97186f, 0.184391f, -0.146588f,
        0.707084f, 0.485713f, -0.513921f,
        0.942302f, 0.331945f, 0.043348f,
        0.499084f, 0.599922f, 0.625307f,
        -0.289203f, 0.211107f, 0.9337f,
        0.412433f, -0.71667f, -0.56239f,
        0.87721f, -0.082816f, 0.47291f,
        -0.420685f, -0.214278f, 0.881538f,
        0.752558f, -0.0391579f, 0.657361f,
        0.0765725f, -0.996789f, 0.0234082f,
        -0.544312f, -0.309435f, -0.779727f,
        -0.455358f, -0.415572f, 0.787368f,
        -0.874586f, 0.483746f, 0.0330131f,
        0.245172f, -0.0838623f, 0.965846f,
        0.382293f, -0.432813f, 0.81641f,
        -0.287735f, -0.905514f, 0.311853f,
        -0.667704f, 0.704955f, -0.239186f,
        0.717885f, -0.464002f, -0.518983f,
        0.976342f, -0.214895f, 0.0240053f,
        -0.0733096f, -0.921136f, 0.382276f,
        -0.986284f, 0.151224f, -0.0661379f,
        -0.899319f, -0.429671f, 0.0812908f,
        0.652102f, -0.724625f, 0.222893f,
        0.203761f, 0.458023f, -0.865272f,
        -0.030396f, 0.698724f, -0.714745f,
        -0.460232f, 0.839138f, 0.289887f,
        -0.0898602f, 0.837894f, 0.538386f,
        -0.731595f, 0.0793784f, 0.677102f,
        -0.447236f, -0.788397f, 0.422386f,
        0.186481f, 0.645855f, -0.740335f,
        -0.259006f, 0.935463f, 0.240467f,
        0.445839f, 0.819655f, -0.359712f,
        0.349962f, 0.755022f, -0.554499f,
        -0.997078f, -0.0359577f, 0.0673977f,
        -0.431163f, -0.147516f, -0.890133f,
        0.299648f, -0.63914f, 0.708316f,
        0.397043f, 0.566526f, -0.722084f,
        -0.502489f, 0.438308f, -0.745246f,
        0.0687235f, 0.354097f, 0.93268f,
        -0.0476651f, -0.462597f, 0.885286f,
        -0.221934f, 0.900739f, -0.373383f,
        -0.956107f, -0.225676f, 0.186893f,
        -0.187627f, 0.391487f, -0.900852f,
        -0.224209f, -0.315405f, 0.92209f,
        -0.730807f, -0.537068f, 0.421283f,
        -0.0353135f, -0.816748f, 0.575913f,
        -0.941391f, 0.176991f, -0.287153f,
        -0.154174f, 0.390458f, 0.90762f,
        -0.283847f, 0.533842f, 0.796519f,
        -0.482737f, -0.850448f, 0.209052f,
        -0.649175f, 0.477748f, 0.591886f,
        0.885373f, -0.405387f, -0.227543f,
        -0.147261f, 0.181623f, -0.972279f,
        0.0959236f, -0.115847f, -0.988624f,
        -0.89724f, -0.191348f, 0.397928f,
        0.903553f, -0.428461f, -0.00350461f,
        0.849072f, -0.295807f, -0.437693f,
        0.65551f, 0.741754f, -0.141804f,
        0.61598f, -0.178669f, 0.767232f,
        0.0112967f, 0.932256f, -0.361623f,
        -0.793031f, 0.258012f, 0.551845f,
        0.421933f, 0.454311f, 0.784585f,
        -0.319993f, 0.0401618f, -0.946568f,
        -0.81571f, 0.551307f, -0.175151f,
        -0.377644f, 0.00322313f, 0.925945f,
        0.129759f, -0.666581f, -0.734052f,
        0.601901f, -0.654237f, -0.457919f,
        -0.927463f, -0.0343576f, -0.372334f,
        -0.438663f, -0.868301f, -0.231578f,
        -0.648845f, -0.749138f, -0.133387f,
        0.507393f, -0.588294f, 0.629653f,
        0.726958f, 0.623665f, 0.287358f,
        0.411159f, 0.367614f, -0.834151f,
        0.806333f, 0.585117f, -0.0864016f,
        0.263935f, -0.880876f, 0.392932f,
        0.421546f, -0.201336f, 0.884174f,
        -0.683198f, -0.569557f, -0.456996f,
        -0.117116f, -0.0406654f, -0.992285f,
        -0.643679f, -0.109196f, -0.757465f,
        -0.561559f, -0.62989f, 0.536554f,
        0.0628422f, 0.104677f, -0.992519f,
        0.480759f, -0.2867f, -0.828658f,
        -0.228559f, -0.228965f, -0.946222f,
        -0.10194f, -0.65706f, -0.746914f,
        0.0689193f, -0.678236f, 0.731605f,
        0.401019f, -0.754026f, 0.52022f,
        -0.742141f, 0.547083f, -0.387203f,
        -0.00210603f, -0.796417f, -0.604745f,
        0.296725f, -0.409909f, -0.862513f,
        -0.260932f, -0.798201f, 0.542945f,
        -0.641628f, 0.742379f, 0.192838f,
        -0.186009f, -0.101514f, 0.97729f,
        0.106711f, -0.962067f, 0.251079f,
        -0.743499f, 0.30988f, -0.592607f,
        -0.795853f, -0.605066f, -0.0226607f,
        -0.828661f, -0.419471f, -0.370628f,
        0.0847218f, -0.489815f, -0.8677f,
        -0.381405f, 0.788019f, -0.483276f,
        0.282042f, -0.953394f, 0.107205f,
        0.530774f, 0.847413f, 0.0130696f,
        0.0515397f, 0.922524f, 0.382484f,
        -0.631467f, -0.709046f, 0.313852f,
        0.688248f, 0.517273f, 0.508668f,
        0.646689f, -0.333782f, -0.685845f,
        -0.932528f, -0.247532f, -0.262906f,
        0.630609f, 0.68757f, -0.359973f,
        0.577805f, -0.394189f, 0.714673f,
        -0.887833f, -0.437301f, -0.14325f,
        0.690982f, 0.174003f, 0.701617f,
        -0.866701f, 0.0118182f, 0.498689f,
        -0.482876f, 0.727143f, 0.487949f,
        -0.577567f, 0.682593f, -0.447752f,
        0.373768f, 0.0982991f, 0.922299f,
        0.170744f, 0.964243f, -0.202687f,
        0.993654f, -0.035791f, -0.106632f,
        0.587065f, 0.4143f, -0.695493f,
        -0.396509f, 0.26509f, -0.878924f,
        -0.0866853f, 0.83553f, -0.542563f,
        0.923193f, 0.133398f, -0.360443f,
        0.00379108f, -0.258618f, 0.965972f,
        0.239144f, 0.245154f, -0.939526f,
        0.758731f, -0.555871f, 0.33961f,
        0.295355f, 0.309513f, 0.903862f,
        0.0531222f, -0.91003f, -0.411124f,
        0.270452f, 0.0229439f, -0.96246f,
        0.563634f, 0.0324352f, 0.825387f,
        0.156326f, 0.147392f, 0.976646f,
        -0.0410141f, 0.981824f, 0.185309f,
        -0.385562f, -0.576343f, -0.720535f,
        0.388281f, 0.904441f, 0.176702f,
        0.945561f, -0.192859f, -0.262146f,
        0.844504f, 0.520193f, 0.127325f,
        0.0330893f, 0.999121f, -0.0257505f,
        -0.592616f, -0.482475f, -0.644999f,
        0.539471f, 0.631024f, -0.557476f,
        0.655851f, -0.027319f, -0.754396f,
        0.274465f, 0.887659f, 0.369772f,
        -0.123419f, 0.975177f, -0.183842f,
        -0.223429f, 0.708045f, 0.66989f,
        -0.908654f, 0.196302f, 0.368528f,
        -0.95759f, -0.00863708f, 0.288005f,
        0.960535f, 0.030592f, 0.276472f,
        -0.413146f, 0.907537f, 0.0754161f,
        -0.847992f, 0.350849f, -0.397259f,
        0.614736f, 0.395841f, 0.68221f,
        -0.503504f, -0.666128f, -0.550234f,
        -0.268833f, -0.738524f, -0.618314f,
        0.792737f, -0.60001f, -0.107502f,
        -0.637582f, 0.508144f, -0.579032f,
        0.750105f, 0.282165f, -0.598101f,
        -0.351199f, -0.392294f, -0.850155f,
        0.250126f, -0.960993f, -0.118025f,
        -0.732341f, 0.680909f, -0.0063274f,
        -0.760674f, -0.141009f, 0.633634f,
        0.222823f, -0.304012f, 0.926243f,
        0.209178f, 0.505671f, 0.836984f,
        0.757914f, -0.56629f, -0.323857f,
        -0.782926f, -0.339196f, 0.52151f,
        -0.462952f, 0.585565f, 0.665424f,
        0.61879f, 0.194119f, -0.761194f,
        0.741388f, -0.276743f, 0.611357f,
        0.707571f, 0.702621f, 0.0752872f,
        0.156562f, 0.819977f, 0.550569f,
        -0.793606f, 0.440216f, 0.42f,
        0.234547f, 0.885309f, -0.401517f,
        0.132598f, 0.80115f, -0.58359f,
        -0.377899f, -0.639179f, 0.669808f,
        -0.865993f, -0.396465f, 0.304748f,
        -0.624815f, -0.44283f, 0.643046f,
        -0.485705f, 0.825614f, -0.287146f,
        -0.971788f, 0.175535f, 0.157529f,
        -0.456027f, 0.392629f, 0.798675f,
        -0.0104443f, 0.521623f, -0.853112f,
        -0.660575f, -0.74519f, 0.091282f,
        -0.0157698f, -0.307475f, -0.951425f,
        -0.603467f, -0.250192f, 0.757121f,
        0.506876f, 0.25006f, 0.824952f,
        0.255404f, 0.966794f, 0.00884498f,
        0.466764f, -0.874228f, -0.133625f,
        0.475077f, -0.0682351f, -0.877295f,
        -0.224967f, -0.938972f, -0.260233f,
        -0.377929f, -0.814757f, -0.439705f,
        -0.305847f, 0.542333f, -0.782517f,
        0.26658f, -0.902905f, -0.337191f,
        0.0275773f, 0.322158f, -0.946284f,
        0.0185422f, 0.716349f, 0.697496f,
        -0.20483f, 0.978416f, 0.0273371f,
        -0.898276f, 0.373969f, 0.230752f,
        -0.00909378f, 0.546594f, 0.837349f,
        0.6602f, -0.751089f, 0.000959236f,
        0.855301f, -0.303056f, 0.420259f,
        0.797138f, 0.0623013f, -0.600574f,
        0.48947f, -0.866813f, 0.0951509f,
        0.251142f, 0.674531f, 0.694216f,
        -0.578422f, -0.737373f, -0.348867f,
        -0.254689f, -0.514807f, 0.818601f,
        0.374972f, 0.761612f, 0.528529f,
        0.640303f, -0.734271f, -0.225517f,
        -0.638076f, 0.285527f, 0.715075f,
        0.772956f, -0.15984f, -0.613995f,
        0.798217f, -0.590628f, 0.118356f,
        -0.986276f, -0.0578337f, -0.154644f,
        -0.312988f, -0.94549f, 0.0899272f,
        -0.497338f, 0.178325f, 0.849032f,
        -0.101136f, -0.981014f, 0.165477f,
        -0.521688f, 0.0553434f, -0.851339f,
        -0.786182f, -0.583814f, 0.202678f,
        -0.565191f, 0.821858f, -0.0714658f,
        0.437895f, 0.152598f, -0.885981f,
        -0.92394f, 0.353436f, -0.14635f,
        0.212189f, -0.815162f, -0.538969f,
        -0.859262f, 0.143405f, -0.491024f,
        0.991353f, 0.112814f, 0.0670273f,
        0.0337884f, -0.979891f, -0.196654f,
    };
}